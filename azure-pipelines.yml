# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

name: $(Date:yyyy.MM.dd)$(Rev:.r)
steps:
- task: VersionJSONFile@2
  inputs:
    Path: '$(Build.SourcesDirectory)'
    recursion: True
    VersionNumber: '$(Build.BuildNumber)'
    useBuildNumberDirectly: True
    VersionRegex: '^(\d{4})(\d{2})(\d{2})\.(\d+)$'
    versionForJSONFileFormat: '{1}.{2}.{3}'
    FilenamePattern: 'package.json'
    OutputVersion: 'OutputedVersion'

- task: VersionDotNetCoreAssemblies@2
  inputs:
    Path: '$(Build.SourcesDirectory)'
    VersionNumber: '$(Build.BuildNumber)'
    Injectversion: True
    VersionRegex: '^(\d{4})(\d{2})(\d{2})\.(\d+)$'
    FilenamePattern: '.csproj'
    Field: 'Version'
    OutputVersion: 'OutputedVersion'

- script: 'echo -e "$(Build.Repository.Uri)\n$(Build.SourceVersion)\n$(Build.BuildNumber)" > .buildinfo.json'
  displayName: "Write Build Information"
  workingDirectory: "$(Build.SourcesDirectory)/Anniversaries.Api"
  failOnStderr: true

- task: NodeTool@0
  inputs:
    versionSpec: '14.x'

- script: npm i
  workingDirectory: "$(Build.SourcesDirectory)/Anniversaries.Web"
  displayName: Pull NPM packages

- script: npm run build
  workingDirectory: "$(Build.SourcesDirectory)/Anniversaries.Web"
  displayName: Build FE

- task: UseDotNet@2
  displayName: Install dotnetcore sdk
  inputs:
    packageType: 'sdk'
    version: '6.x'

- task: DotNetCoreCLI@2
  displayName: Restore nuget packages
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build application
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'

#windows only:
# - task: ResharperCli@2
#   inputs:
#     solutionOrProjectPath: '$(Build.SourcesDirectory)/AnniversariesApi.sln'
#     failBuildLevelSelector: 'Warning'

#- task: DotNetCoreCLI@2
#  displayName: Perform tests and code coverage analysis
#  inputs:
#    command: test
#    projects: '**/*Tests/*.csproj'
#    arguments: '--configuration $(buildConfiguration) --collect "Code coverage" --no-build'

- task: DotNetCoreCLI@2
  displayName: Publish to staging directory
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-build'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: Publish as drop
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'drop'
